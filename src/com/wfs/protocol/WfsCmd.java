/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wfs.protocol;

/**
 * 命令
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2023-02-11")
public class WfsCmd implements org.apache.thrift.TBase<WfsCmd, WfsCmd._Fields>, java.io.Serializable, Cloneable, Comparable<WfsCmd> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WfsCmd");

  private static final org.apache.thrift.protocol.TField CMD_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("cmdKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CMD_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("cmdValue", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WfsCmdStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WfsCmdTupleSchemeFactory();

  /**
   * 名称
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String cmdKey; // optional
  /**
   * 对象
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String cmdValue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 名称
     */
    CMD_KEY((short)1, "cmdKey"),
    /**
     * 对象
     */
    CMD_VALUE((short)2, "cmdValue");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CMD_KEY
          return CMD_KEY;
        case 2: // CMD_VALUE
          return CMD_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CMD_KEY,_Fields.CMD_VALUE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CMD_KEY, new org.apache.thrift.meta_data.FieldMetaData("cmdKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CMD_VALUE, new org.apache.thrift.meta_data.FieldMetaData("cmdValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WfsCmd.class, metaDataMap);
  }

  public WfsCmd() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WfsCmd(WfsCmd other) {
    if (other.isSetCmdKey()) {
      this.cmdKey = other.cmdKey;
    }
    if (other.isSetCmdValue()) {
      this.cmdValue = other.cmdValue;
    }
  }

  @Override
  public WfsCmd deepCopy() {
    return new WfsCmd(this);
  }

  @Override
  public void clear() {
    this.cmdKey = null;
    this.cmdValue = null;
  }

  /**
   * 名称
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCmdKey() {
    return this.cmdKey;
  }

  /**
   * 名称
   */
  public WfsCmd setCmdKey(@org.apache.thrift.annotation.Nullable java.lang.String cmdKey) {
    this.cmdKey = cmdKey;
    return this;
  }

  public void unsetCmdKey() {
    this.cmdKey = null;
  }

  /** Returns true if field cmdKey is set (has been assigned a value) and false otherwise */
  public boolean isSetCmdKey() {
    return this.cmdKey != null;
  }

  public void setCmdKeyIsSet(boolean value) {
    if (!value) {
      this.cmdKey = null;
    }
  }

  /**
   * 对象
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCmdValue() {
    return this.cmdValue;
  }

  /**
   * 对象
   */
  public WfsCmd setCmdValue(@org.apache.thrift.annotation.Nullable java.lang.String cmdValue) {
    this.cmdValue = cmdValue;
    return this;
  }

  public void unsetCmdValue() {
    this.cmdValue = null;
  }

  /** Returns true if field cmdValue is set (has been assigned a value) and false otherwise */
  public boolean isSetCmdValue() {
    return this.cmdValue != null;
  }

  public void setCmdValueIsSet(boolean value) {
    if (!value) {
      this.cmdValue = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CMD_KEY:
      if (value == null) {
        unsetCmdKey();
      } else {
        setCmdKey((java.lang.String)value);
      }
      break;

    case CMD_VALUE:
      if (value == null) {
        unsetCmdValue();
      } else {
        setCmdValue((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CMD_KEY:
      return getCmdKey();

    case CMD_VALUE:
      return getCmdValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CMD_KEY:
      return isSetCmdKey();
    case CMD_VALUE:
      return isSetCmdValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof WfsCmd)
      return this.equals((WfsCmd)that);
    return false;
  }

  public boolean equals(WfsCmd that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cmdKey = true && this.isSetCmdKey();
    boolean that_present_cmdKey = true && that.isSetCmdKey();
    if (this_present_cmdKey || that_present_cmdKey) {
      if (!(this_present_cmdKey && that_present_cmdKey))
        return false;
      if (!this.cmdKey.equals(that.cmdKey))
        return false;
    }

    boolean this_present_cmdValue = true && this.isSetCmdValue();
    boolean that_present_cmdValue = true && that.isSetCmdValue();
    if (this_present_cmdValue || that_present_cmdValue) {
      if (!(this_present_cmdValue && that_present_cmdValue))
        return false;
      if (!this.cmdValue.equals(that.cmdValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCmdKey()) ? 131071 : 524287);
    if (isSetCmdKey())
      hashCode = hashCode * 8191 + cmdKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetCmdValue()) ? 131071 : 524287);
    if (isSetCmdValue())
      hashCode = hashCode * 8191 + cmdValue.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(WfsCmd other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCmdKey(), other.isSetCmdKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCmdKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmdKey, other.cmdKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCmdValue(), other.isSetCmdValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCmdValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmdValue, other.cmdValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WfsCmd(");
    boolean first = true;

    if (isSetCmdKey()) {
      sb.append("cmdKey:");
      if (this.cmdKey == null) {
        sb.append("null");
      } else {
        sb.append(this.cmdKey);
      }
      first = false;
    }
    if (isSetCmdValue()) {
      if (!first) sb.append(", ");
      sb.append("cmdValue:");
      if (this.cmdValue == null) {
        sb.append("null");
      } else {
        sb.append(this.cmdValue);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WfsCmdStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public WfsCmdStandardScheme getScheme() {
      return new WfsCmdStandardScheme();
    }
  }

  private static class WfsCmdStandardScheme extends org.apache.thrift.scheme.StandardScheme<WfsCmd> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, WfsCmd struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CMD_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cmdKey = iprot.readString();
              struct.setCmdKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CMD_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cmdValue = iprot.readString();
              struct.setCmdValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, WfsCmd struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cmdKey != null) {
        if (struct.isSetCmdKey()) {
          oprot.writeFieldBegin(CMD_KEY_FIELD_DESC);
          oprot.writeString(struct.cmdKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cmdValue != null) {
        if (struct.isSetCmdValue()) {
          oprot.writeFieldBegin(CMD_VALUE_FIELD_DESC);
          oprot.writeString(struct.cmdValue);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WfsCmdTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public WfsCmdTupleScheme getScheme() {
      return new WfsCmdTupleScheme();
    }
  }

  private static class WfsCmdTupleScheme extends org.apache.thrift.scheme.TupleScheme<WfsCmd> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WfsCmd struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCmdKey()) {
        optionals.set(0);
      }
      if (struct.isSetCmdValue()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCmdKey()) {
        oprot.writeString(struct.cmdKey);
      }
      if (struct.isSetCmdValue()) {
        oprot.writeString(struct.cmdValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WfsCmd struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.cmdKey = iprot.readString();
        struct.setCmdKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cmdValue = iprot.readString();
        struct.setCmdValueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

