/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wfs.protocol;

/**
 * 文件对象
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2023-02-11")
public class WfsFile implements org.apache.thrift.TBase<WfsFile, WfsFile._Fields>, java.io.Serializable, Cloneable, Comparable<WfsFile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WfsFile");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("fileBody", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WfsFileStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WfsFileTupleSchemeFactory();

  /**
   * 名称
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // optional
  /**
   * 对象
   */
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer fileBody; // optional
  /**
   * 类型
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String fileType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 名称
     */
    NAME((short)1, "name"),
    /**
     * 对象
     */
    FILE_BODY((short)2, "fileBody"),
    /**
     * 类型
     */
    FILE_TYPE((short)3, "fileType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // FILE_BODY
          return FILE_BODY;
        case 3: // FILE_TYPE
          return FILE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.FILE_BODY,_Fields.FILE_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_BODY, new org.apache.thrift.meta_data.FieldMetaData("fileBody", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WfsFile.class, metaDataMap);
  }

  public WfsFile() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WfsFile(WfsFile other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetFileBody()) {
      this.fileBody = org.apache.thrift.TBaseHelper.copyBinary(other.fileBody);
    }
    if (other.isSetFileType()) {
      this.fileType = other.fileType;
    }
  }

  @Override
  public WfsFile deepCopy() {
    return new WfsFile(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.fileBody = null;
    this.fileType = null;
  }

  /**
   * 名称
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  /**
   * 名称
   */
  public WfsFile setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 对象
   */
  public byte[] getFileBody() {
    setFileBody(org.apache.thrift.TBaseHelper.rightSize(fileBody));
    return fileBody == null ? null : fileBody.array();
  }

  public java.nio.ByteBuffer bufferForFileBody() {
    return org.apache.thrift.TBaseHelper.copyBinary(fileBody);
  }

  /**
   * 对象
   */
  public WfsFile setFileBody(byte[] fileBody) {
    this.fileBody = fileBody == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(fileBody.clone());
    return this;
  }

  public WfsFile setFileBody(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer fileBody) {
    this.fileBody = org.apache.thrift.TBaseHelper.copyBinary(fileBody);
    return this;
  }

  public void unsetFileBody() {
    this.fileBody = null;
  }

  /** Returns true if field fileBody is set (has been assigned a value) and false otherwise */
  public boolean isSetFileBody() {
    return this.fileBody != null;
  }

  public void setFileBodyIsSet(boolean value) {
    if (!value) {
      this.fileBody = null;
    }
  }

  /**
   * 类型
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFileType() {
    return this.fileType;
  }

  /**
   * 类型
   */
  public WfsFile setFileType(@org.apache.thrift.annotation.Nullable java.lang.String fileType) {
    this.fileType = fileType;
    return this;
  }

  public void unsetFileType() {
    this.fileType = null;
  }

  /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return this.fileType != null;
  }

  public void setFileTypeIsSet(boolean value) {
    if (!value) {
      this.fileType = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case FILE_BODY:
      if (value == null) {
        unsetFileBody();
      } else {
        if (value instanceof byte[]) {
          setFileBody((byte[])value);
        } else {
          setFileBody((java.nio.ByteBuffer)value);
        }
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case FILE_BODY:
      return getFileBody();

    case FILE_TYPE:
      return getFileType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case FILE_BODY:
      return isSetFileBody();
    case FILE_TYPE:
      return isSetFileType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof WfsFile)
      return this.equals((WfsFile)that);
    return false;
  }

  public boolean equals(WfsFile that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_fileBody = true && this.isSetFileBody();
    boolean that_present_fileBody = true && that.isSetFileBody();
    if (this_present_fileBody || that_present_fileBody) {
      if (!(this_present_fileBody && that_present_fileBody))
        return false;
      if (!this.fileBody.equals(that.fileBody))
        return false;
    }

    boolean this_present_fileType = true && this.isSetFileType();
    boolean that_present_fileType = true && that.isSetFileType();
    if (this_present_fileType || that_present_fileType) {
      if (!(this_present_fileType && that_present_fileType))
        return false;
      if (!this.fileType.equals(that.fileType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileBody()) ? 131071 : 524287);
    if (isSetFileBody())
      hashCode = hashCode * 8191 + fileBody.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileType()) ? 131071 : 524287);
    if (isSetFileType())
      hashCode = hashCode * 8191 + fileType.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(WfsFile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileBody(), other.isSetFileBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileBody, other.fileBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileType(), other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WfsFile(");
    boolean first = true;

    if (isSetName()) {
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetFileBody()) {
      if (!first) sb.append(", ");
      sb.append("fileBody:");
      if (this.fileBody == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.fileBody, sb);
      }
      first = false;
    }
    if (isSetFileType()) {
      if (!first) sb.append(", ");
      sb.append("fileType:");
      if (this.fileType == null) {
        sb.append("null");
      } else {
        sb.append(this.fileType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WfsFileStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public WfsFileStandardScheme getScheme() {
      return new WfsFileStandardScheme();
    }
  }

  private static class WfsFileStandardScheme extends org.apache.thrift.scheme.StandardScheme<WfsFile> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, WfsFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileBody = iprot.readBinary();
              struct.setFileBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileType = iprot.readString();
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, WfsFile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fileBody != null) {
        if (struct.isSetFileBody()) {
          oprot.writeFieldBegin(FILE_BODY_FIELD_DESC);
          oprot.writeBinary(struct.fileBody);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fileType != null) {
        if (struct.isSetFileType()) {
          oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
          oprot.writeString(struct.fileType);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WfsFileTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public WfsFileTupleScheme getScheme() {
      return new WfsFileTupleScheme();
    }
  }

  private static class WfsFileTupleScheme extends org.apache.thrift.scheme.TupleScheme<WfsFile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WfsFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetFileBody()) {
        optionals.set(1);
      }
      if (struct.isSetFileType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetFileBody()) {
        oprot.writeBinary(struct.fileBody);
      }
      if (struct.isSetFileType()) {
        oprot.writeString(struct.fileType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WfsFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fileBody = iprot.readBinary();
        struct.setFileBodyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fileType = iprot.readString();
        struct.setFileTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

